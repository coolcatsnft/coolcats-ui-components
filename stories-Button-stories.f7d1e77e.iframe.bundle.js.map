{"version":3,"file":"stories-Button-stories.f7d1e77e.iframe.bundle.js","mappings":";AA8EA;AAGA","sources":["webpack://coolcats-ui-components/./src/Button/index.tsx"],"sourcesContent":["import React, { forwardRef, useState } from \"react\";\nimport styled from \"../Styled\";\nimport { styledButtonPartial, styledCircleButtonPartial, largeElementHeightPartial } from \"../partials\";\nimport { ButtonSizeType, CoolCatsUITheme } from \"../constants\";\n\nexport type ButtonThemeType = {\n  $extended?: boolean;\n  $theme?: CoolCatsUITheme;\n  $circle?: boolean;\n  $size?: ButtonSizeType;\n}\n\nexport type ButtonType = React.ComponentProps<\"button\"> & ButtonThemeType;\n\nexport const ButtonTheme = (props: ButtonThemeType) => {\n  const { $extended, $theme, $circle, $size } = props;\n  return `\n    ${$circle ===  true ? `${styledCircleButtonPartial}`: `${styledButtonPartial}`}\n\n    ${!$circle && `\n      &:has(> i),\n      &:has(> svg) {\n        position: relative;\n        padding-left: 40px;\n        overflow: hidden;\n\n        ${$size === 'large' ? `\n          padding-left: 55px;\n        ` : ``}\n\n        > i,\n        > svg {\n          position: absolute;\n          left: 12px;\n          display: flex;\n          align-items: center;\n          height: 100%;\n        }\n\n        > i > svg {\n          height: 80%;\n          width: 80%;\n        }\n      }\n    `}\n\n    ${$extended === true ? `\n      width: 100%;\n    ` : ``}\n\n    ${typeof $theme !== 'undefined' ? `\n      color: var(--cc-font-color-${$theme.toLowerCase()});\n      background-color: var(--cc-color-${$theme.toLowerCase()});\n      svg path {\n        &:not([fill=\"none\"]) {\n          fill: var(--cc-font-color-${$theme.toLowerCase()});\n        }\n      }\n    ` : ``}\n\n    ${typeof $theme !== 'undefined' && $theme === CoolCatsUITheme.PRIMARY ? `\n      &:not(:active) {\n        box-shadow: 4px 4px 0px 0px var(--cc-color-disabled);\n      }\n    ` : ``}\n\n    ${$size === 'large' ? `\n      ${largeElementHeightPartial}\n\n      ${$circle === true && `\n        width: 48px;\n        padding: 0;\n      `}\n    ` : ``}\n  `;\n};\n\nconst StyledButton = styled.button<ButtonType>`\n  ${({ $extended, $theme, $circle, $size }) => ButtonTheme({$extended, $theme, $circle, $size})}\n`;\n\nexport const Button = forwardRef((props: ButtonType, ref) => {\n  const [promising, setPromising] = useState(false);\n  const { onClick: propsOnClick, disabled } = props;\n\n  const onClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (propsOnClick) {\n      const r = propsOnClick(e) as any;\n      if (r instanceof Promise) {\n        return new Promise((res: Function) => {\n          setPromising(true);\n          r.finally(() => {\n            setPromising(false);\n            res();\n          })\n        })\n      }\n\n      return Promise.resolve(r);\n    }\n\n    return Promise.resolve();\n  }\n\n  return (\n    <StyledButton {...props as any} ref={ref} onClick={onClick} disabled={disabled || promising} />\n  )\n});\n\nexport default Button;\n"],"names":[],"sourceRoot":""}