{"version":3,"file":"stories-Header-stories.b004677d.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;AAqBA;;;;;;;;;;;;;;;;;;AAoBA;;;;;;;;AC3BA;;;AAKA;;;;;;AAMA;;;;;;;;;;;;;;AAgBA;;;;;;;;;AASA;;;;;;;;AAQA;;;;;;AAMA;;;;;;;AASA;;;;;;;;;AASA;AACA;;AAEA;;;;AAIA;;;;;;AAMA;;;;AAkBA","sources":["webpack://coolcats-ui-components/./src/IconButton/index.tsx","webpack://coolcats-ui-components/./src/Header/index.tsx"],"sourcesContent":["import Styled from \"../Styled\";\n\nexport const IconButton = Styled.button<{ active?: boolean }>`\n  font-family: var(--cc-default-font);\n  font-size: 10px;\n  font-weight: bold;\n  letter-spacing: 0.5px;\n  text-transform: uppercase;\n  color: var(--cc-color-white);\n  text-align: center;\n  display: grid;\n  justify-items: center;\n  cursor: pointer;\n\n  > * {\n    display: flex;\n    height: 31px;\n    width: 31px;\n    align-content: center;\n    justify-content: center;\n    border-radius: 50%;\n    background-color: ${({ active }) => active ? `var(--cc-color-yellow)` : 'var(--cc-color-bluecat)'};\n    margin-bottom: 6px;\n\n    div,\n    svg {\n      height: 60%;\n      width: 60%;\n    }\n  }\n\n  &[title=\"Close Menu\"],\n  &[title=\"Open Menu\"] {\n    width: 37px;\n\n    i {\n      background-color: var(--cc-color-white);\n    }\n  }\n`;\n\nexport default IconButton;","import { MouseEventHandler, ReactElement, ReactNode, forwardRef, useState } from \"react\";\nimport styled from \"../Styled\";\nimport { device } from \"../constants\";\nimport IconButton from \"../IconButton\";\nimport { MenuIcon } from \"../Icon\";\n\nconst StyledHeader = styled.header`\n  height: var(--cc-mobile-header-height);\n  background-color: var(--cc-color-primary);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n\n  ${device.laptop} {\n    height: var(--cc-desktop-header-height);\n  }\n`;\n\nconst StyledHeaderLogo = styled.div`\n  position: relative;\n  z-index: 2;\n  img {\n    height: 40px;\n    display: block;\n    ${device.laptop} {\n      height: 61px;\n    }\n  }\n\n  a {\n    display: flex;\n    transition: 0.24s ease;\n\n    &:hover,\n    &:focus {\n      transform: scale(1.05);\n    }\n  }\n`;\n\nexport const UserMenuNav = styled.nav<{ visible?: boolean }>`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  right: 0;\n  width: 100%;\n  height: 100%;\n  gap: var(--cc-gap);\n  position: absolute;\n  z-index: ${({ visible }) => visible ? '3' : '1'};\n\n  > button {\n    right: 4px;\n    position: absolute;\n\n    &[title=\"Close Menu\"],\n    &[title=\"Open Menu\"] {\n      ${device.laptop} {\n        display: none;\n      }\n    }\n  }\n\n  ${device.laptop} {\n    right: calc(var(--cc-gap) * 2);\n    gap: calc(var(--cc-gap) * 2);\n    padding: var(--cc-gap);\n    padding-right: 0;\n    width: auto;\n  }\n`;\n\nexport const UserMenuNavButtons = styled.div<{ visible?: boolean }>`\n  display: flex;\n  align-items: center;\n  gap: var(--cc-gap);\n  position: absolute;\n  background-color: var(--cc-color-primary);\n  padding-left: 4px;\n  width: 100%;\n  height: 100%;\n  opacity: ${({ visible }) => visible ? '1' : '0'};\n  pointer-events: ${({ visible }) => visible ? 'all' : 'none'};\n\n  ${device.mobileL} {\n    justify-content: center;\n  }\n\n  ${device.laptop} {\n    justify-content: center;\n    position: static;\n    width: auto;\n  }\n\n  ${device.laptop} {\n    opacity: 1;\n    pointer-events: all;\n  }\n`;\n\nexport type HeaderProps = {\n  icons?: {\n    title: string,\n    label?: string,\n    icon: ReactElement,\n    active?: boolean,\n    clickAction: MouseEventHandler<HTMLButtonElement>\n  }[],\n  menuClickAction?: MouseEventHandler<HTMLButtonElement>,\n  children: ReactNode | [ReactNode, ReactNode]\n};\n\nexport const Header = forwardRef((props: HeaderProps, ref: any) => {\n  const [visible, setVisible] = useState(false);\n\n  const {\n    children,\n    icons,\n    menuClickAction\n  } = props;\n\n  const isTwoChildren = Array.isArray(children) && children.length === 2;\n\n  const onMenuClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n    setVisible(v => !v);\n    if (menuClickAction) {\n      menuClickAction(e);\n    }\n  }\n\n  return (\n    <StyledHeader ref={ref}>\n      {!isTwoChildren && <StyledHeaderLogo>\n        {children || null}\n      </StyledHeaderLogo>}\n      {isTwoChildren && <StyledHeaderLogo>\n        {children[0]}\n      </StyledHeaderLogo>}\n      <UserMenuNav visible={visible}>\n        <UserMenuNavButtons visible={visible}>\n          {(icons || [])?.map((icon, i) => (\n            <IconButton key={i} title={icon.title} active={icon.active} onClick={icon.clickAction}>\n              <i>{icon.icon}</i>\n              {icon.label || icon.title}\n            </IconButton>  \n          ))}\n          {isTwoChildren && <>\n            {children[1]}\n          </>}\n        </UserMenuNavButtons>\n        {((icons || []).length > 0 || isTwoChildren || menuClickAction) && (\n          <IconButton onClick={onMenuClick} title={visible ? 'Close Menu' : 'Open Menu'}>\n            <i><MenuIcon open={visible} /></i>\n            {visible ? 'Close' : 'Menu'}\n          </IconButton>\n        )}\n      </UserMenuNav>\n    </StyledHeader>\n  )\n});\n\nexport default Header;"],"names":[],"sourceRoot":""}